package ru.netology

class NoChatException : RuntimeException()

fun main() {
    ChatService.addMessage(1, Message(1, "Hello", 1.23, 11.11))
    ChatService.addMessage(1, Message(2, "Hi", 2.23, 11.22))
    ChatService.addMessage(2, Message(3, "Bye", 2.23, 11.33))
    ChatService.printChats()
    println(ChatService.getMessages(1, 1))
    ChatService.printChats()
    println(ChatService.getUnreadChatCount())

    ChatService.getListChat()
    ChatService.deleteMessage(2, Message(3, "Bye", 2.23, 11.33))
    ChatService.updateMessage(1, Message(1, "Hello", 1.23, 11.11),
        newMessage = Message(8, "44", 4.44, 4.44))
    ChatService.getListChat()



}

/*
Личные сообщения - один из неотъемлемых компонентов почти любого социального сервиса.

Задача целиком творческая (руководитель вам сказал "делай, как хочешь"), вот требования:

Должны быть чаты (чат - это общение с одним человеком, т.н. direct messages).
Можно создавать чаты, удалять их, получать список имеющихся чатов.
В каждом чате есть сообщения от 1 до нескольких (см. раздел ниже).
Имеется возможность создавать сообщения, редактировать их и удалять
(для простоты - можно удалять и свои, и чужие).
В каждом чате есть прочитанные и непрочитанные сообщения.

Пользователь должен иметь возможность:

Получить информацию о количестве непрочитанных чатов (например, service.getUnreadChatsCount) -
это количество чатов, в каждом из которых есть хотя бы одно непрочитанное сообщение.
Получить список чатов (например, service.getChats) - где в каждом чате есть последнее сообщение
(если нет, то пишется "нет сообщений").
Получить список сообщений из чата, указав (после того, как вызвана данная функция,
все отданные сообщения автоматически считаются прочитанными):
id чата;
id последнего сообщения, начиная с которого нужно подгрузить более новые;
количество сообщений.
Создать новое сообщение.
Удалить сообщение (при удалении последнего сообщения в чате весь чат удаляется).
Создать чат (чат создаётся тогда, когда пользователю, с которым до этого не было чата,
отправляется первое сообщение).
Удалить чат (целиком удаляется все переписка).
Важный момент: чтобы отделять одного пользователя от другого,
передавайте во все функции первым параметром id пользователя (например, service.getChats(999) -
все чаты для пользователя с id=999)

Старайтесь по максимуму использовать lambda-функции (которые напишите сами) и extension-функции
(которые есть в составе Iterable, Collection, List).

Расчёт статистики старайтесь производить как цепочку вызовов lambda-функций
(попробуйте обойтись без for, while и do-while).

Подсказки
Сообщения могут быть входящими и исходящими (причём то, что для одного пользователя входящее,
для другого исходящее.
Непрочитанными могут быть как входящие сообщения
(тогда они участвуют в подсчёте статистики непрочитанных для получателя) так и отправленные
(тогда они не участвуют в подсчёте статистики для отправителя).
Итог: у вас должен быть репозиторий на GitHub, в котором расположен ваш Gradle-проект.
Автотесты также должны храниться в репозитории.

Важно: автотесты должны быть, в том числе на исключения.

 */
/// TODO:
/*
Должны быть класс Chats, класс ru.netology.Main, класс ChatService, класс ChatTest

Класс Чат:
дата класс чат, в ней переменные
в нем коллекция сообщений Message
дата класс мессадж, в нем переменные

Класс мейн вызов функций, и всё

Класс чат сервис, функции
Функции Чатс:
1. Создание чата (автоматически, после отправки первого сообщения)
2. Удаление чата (целиком удаляется вся переписка)
3. Получение списка чатов
4. Получение списка непрочитанных чатов
5. Получение списка чатов, где есть последнее сообщение, не пустых
6. Получение списка сообщений из чата

Функции Мессадж:
1. Создание сообщения
2. Удаление сообщения (при удалении последнего сообщения в чате весь чат удаляется)
3. Редактирование сообщения

Класс чат тест, тесты к каждой функции
 */
